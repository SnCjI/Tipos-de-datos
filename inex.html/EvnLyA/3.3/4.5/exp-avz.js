// Importamos nuestro m√≥dulo de planetas
const planetas = require('./planetas');
const readline = require('readline');

// Configuramos la interfaz de l√≠nea de comandos
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

class ExploradorEspacial {
  constructor() {
    this.planetasVisitados = [];
  }

  mostrarMenu() {
    console.clear();
    console.log('üöÄ =======================================');
    console.log('üåå    EXPLORADOR ESPACIAL AVANZADO    üåå');
    console.log('üöÄ =======================================');
    console.log('');
    console.log('¬øQu√© deseas hacer, explorador?');
    console.log('1. üîç Ver todos los planetas');
    console.log('2. ü™ê Buscar planeta por nombre');
    console.log('3. üìä Estad√≠sticas de exploraci√≥n');
    console.log('4. ‚≠ê Marcar planeta como visitado');
    console.log('5. üó∫Ô∏è  Ver planetas visitados');
    console.log('6. üé≤ Planeta aleatorio');
    console.log('7. üö™ Salir');
    console.log('');
  }

  verTodosPlanetas() {
    console.log('\nüåå CAT√ÅLOGO COMPLETO DE PLANETAS:\n');
    planetas.forEach((planeta, index) => {
      const visitado = this.planetasVisitados.includes(planeta.nombre) ? '‚úÖ' : '‚è≥';
      console.log(`${visitado} ${index + 1}. ${planeta.nombre}`);
      console.log(`   üìù ${planeta.descripcion}`);
      console.log(`   üìÖ Descubierto: ${planeta.descubiertoEn}`);
      console.log('');
    });
  }

  buscarPlaneta(nombre) {
    const planeta = planetas.find(p => 
      p.nombre.toLowerCase().includes(nombre.toLowerCase())
    );
    
    if (planeta) {
      const visitado = this.planetasVisitados.includes(planeta.nombre) ? '‚úÖ VISITADO' : '‚è≥ PENDIENTE';
      console.log(`\nüéØ ¬°Planeta encontrado!`);
      console.log(`ü™ê Nombre: ${planeta.nombre} ${visitado}`);
      console.log(`üìù Descripci√≥n: ${planeta.descripcion}`);
      console.log(`üìÖ Descubierto en: ${planeta.descubiertoEn}`);
    } else {
      console.log(`\n‚ùå No se encontr√≥ ning√∫n planeta con el nombre "${nombre}"`);
    }
  }

  mostrarEstadisticas() {
    const totalPlanetas = planetas.length;
    const planetasVisitados = this.planetasVisitados.length;
    const porcentajeVisitado = ((planetasVisitados / totalPlanetas) * 100).toFixed(1);
    
    console.log('\nüìä ESTAD√çSTICAS DE EXPLORACI√ìN:');
    console.log(`üåå Total de planetas conocidos: ${totalPlanetas}`);
    console.log(`‚úÖ Planetas visitados: ${planetasVisitados}`);
    console.log(`‚è≥ Planetas pendientes: ${totalPlanetas - planetasVisitados}`);
    console.log(`üìà Progreso de exploraci√≥n: ${porcentajeVisitado}%`);
    console.log(`üèÜ Estado: ${this.obtenerRango(porcentajeVisitado)}`);
  }

  obtenerRango(porcentaje) {
    if (porcentaje === 100) return 'Maestro Explorador üåü';
    if (porcentaje >= 80) return 'Explorador Experto üöÄ';
    if (porcentaje >= 60) return 'Explorador Veterano üõ∞Ô∏è';
    if (porcentaje >= 40) return 'Explorador Intermedio üåô';
    if (porcentaje >= 20) return 'Explorador Novato üå†';
    return 'Aspirante a Explorador üî≠';
  }

  marcarComoVisitado(nombre) {
    const planeta = planetas.find(p => 
      p.nombre.toLowerCase().includes(nombre.toLowerCase())
    );
    
    if (planeta) {
      if (!this.planetasVisitados.includes(planeta.nombre)) {
        this.planetasVisitados.push(planeta.nombre);
        console.log(`\n‚úÖ ¬°${planeta.nombre} marcado como visitado!`);
        console.log(`üöÄ ¬°Contin√∫a explorando el universo!`);
      } else {
        console.log(`\n‚ö†Ô∏è  Ya has visitado ${planeta.nombre} anteriormente.`);
      }
    } else {
      console.log(`\n‚ùå No se encontr√≥ el planeta "${nombre}"`);
    }
  }

  verPlanetasVisitados() {
    if (this.planetasVisitados.length === 0) {
      console.log('\nüåå A√∫n no has visitado ning√∫n planeta.');
      console.log('¬°Comienza tu aventura explorando nuevos mundos!');
      return;
    }

    console.log('\nüó∫Ô∏è  PLANETAS VISITADOS:');
    this.planetasVisitados.forEach((nombrePlaneta, index) => {
      const planeta = planetas.find(p => p.nombre === nombrePlaneta);
      console.log(`${index + 1}. ‚úÖ ${planeta.nombre}`);
      console.log(`   üìù ${planeta.descripcion}`);
      console.log('');
    });
  }

  planetaAleatorio() {
    const indiceAleatorio = Math.floor(Math.random() * planetas.length);
    const planeta = planetas[indiceAleatorio];
    const visitado = this.planetasVisitados.includes(planeta.nombre) ? '‚úÖ' : '‚è≥';
    
    console.log('\nüé≤ ¬°PLANETA ALEATORIO SELECCIONADO!');
    console.log(`ü™ê ${planeta.nombre} ${visitado}`);
    console.log(`üìù ${planeta.descripcion}`);
    console.log(`üìÖ Descubierto en: ${planeta.descubiertoEn}`);
  }

  iniciar() {
    this.mostrarMenu();
    this.preguntarOpcion();
  }

  preguntarOpcion() {
    rl.question('üëâ Selecciona una opci√≥n (1-7): ', (respuesta) => {
      switch(respuesta) {
        case '1':
          this.verTodosPlanetas();
          this.continuar();
          break;
        case '2':
          rl.question('üîç Ingresa el nombre del planeta a buscar: ', (nombre) => {
            this.buscarPlaneta(nombre);
            this.continuar();
          });
          break;
        case '3':
          this.mostrarEstadisticas();
          this.continuar();
          break;
        case '4':
          rl.question('‚≠ê Ingresa el nombre del planeta visitado: ', (nombre) => {
            this.marcarComoVisitado(nombre);
            this.continuar();
          });
          break;
        case '5':
          this.verPlanetasVisitados();
          this.continuar();
          break;
        case '6':
          this.planetaAleatorio();
          this.continuar();
          break;
        case '7':
          console.log('\nüöÄ ¬°Gracias por explorar el universo!');
          console.log('üåü ¬°Que la fuerza te acompa√±e en futuras misiones!');
          rl.close();
          break;
        default:
          console.log('\n‚ùå Opci√≥n no v√°lida. Por favor selecciona del 1 al 7.');
          this.continuar();
      }
    });
  }

  continuar() {
    console.log('\n');
    rl.question('Presiona ENTER para continuar...', () => {
      this.mostrarMenu();
      this.preguntarOpcion();
    });
  }
}

// Iniciar la aplicaci√≥n
const explorador = new ExploradorEspacial();
explorador.iniciar();
