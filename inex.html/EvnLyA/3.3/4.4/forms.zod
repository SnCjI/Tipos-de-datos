
import React, { useState } from 'react';
import { AlertCircle, CheckCircle, Eye, EyeOff, User, Mail, Lock } from 'lucide-react';

// Simulación de Zod - Esquema de validación personalizado
const createValidationSchema = () => {
  const validateNombre = (value: string) => {
    const errors: string[] = [];
    
    if (!value || value.trim().length === 0) {
      errors.push("El nombre es requerido");
    } else if (value.trim().length < 2) {
      errors.push("El nombre debe tener al menos 2 caracteres");
    } else if (value.length > 50) {
      errors.push("El nombre no puede exceder 50 caracteres");
    } else if (!/^[a-zA-ZáéíóúÁÉÍÓÚñÑ\s]+$/.test(value)) {
      errors.push("El nombre solo puede contener letras y espacios");
    }
    
    return errors;
  };

  const validateEmail = (value: string) => {
    const errors: string[] = [];
    
    if (!value || value.trim().length === 0) {
      errors.push("El correo electrónico es requerido");
    } else if (value.length > 100) {
      errors.push("El correo no puede exceder 100 caracteres");
    } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(value)) {
      errors.push("Ingresa un correo electrónico válido");
    }
    
    return errors;
  };

  const validatePassword = (value: string) => {
    const errors: string[] = [];
    
    if (!value || value.length === 0) {
      errors.push("La contraseña es requerida");
    } else {
      if (value.length < 8) {
        errors.push("La contraseña debe tener al menos 8 caracteres");
      }
      if (value.length > 50) {
        errors.push("La contraseña no puede exceder 50 caracteres");
      }
      if (!/[A-Z]/.test(value)) {
        errors.push("La contraseña debe contener al menos una mayúscula");
      }
      if (!/[a-z]/.test(value)) {
        errors.push("La contraseña debe contener al menos una minúscula");
      }
      if (!/[0-9]/.test(value)) {
        errors.push("La contraseña debe contener al menos un número");
      }
      if (!/[^A-Za-z0-9]/.test(value)) {
        errors.push("La contraseña debe contener al menos un carácter especial");
      }
    }
    
    return errors;
  };

  return {
    validate: (data: FormData) => {
      const result = {
        success: true,
        errors: {} as Record<keyof FormData, string>
      };

      const nombreErrors = validateNombre(data.nombre);
      const emailErrors = validateEmail(data.email);
      const passwordErrors = validatePassword(data.password);

      if (nombreErrors.length > 0) {
        result.errors.nombre = nombreErrors[0];
        result.success = false;
      }

      if (emailErrors.length > 0) {
        result.errors.email = emailErrors[0];
        result.success = false;
      }

      if (passwordErrors.length > 0) {
        result.errors.password = passwordErrors[0];
        result.success = false;
      }

      return result;
    },
    validateField: (field: keyof FormData, value: string) => {
      switch (field) {
        case 'nombre':
          const nombreErrors = validateNombre(value);
          return { success: nombreErrors.length === 0, error: nombreErrors[0] || null };
        case 'email':
          const emailErrors = validateEmail(value);
          return { success: emailErrors.length === 0, error: emailErrors[0] || null };
        case 'password':
          const passwordErrors = validatePassword(value);
          return { success: passwordErrors.length === 0, error: passwordErrors[0] || null };
        default:
          return { success: true, error: null };
      }
    }
  };
};

interface FormData {
  nombre: string;
  email: string;
  password: string;
}

export default function RegistrationForm() {
  const [formData, setFormData] = useState<FormData>({
    nombre: '',
    email: '',
    password: ''
  });
  
  const [errors, setErrors] = useState<Partial<Record<keyof FormData, string>>>({});
  const [touchedFields, setTouchedFields] = useState<Partial<Record<keyof FormData, boolean>>>({});
  const [showPassword, setShowPassword] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [submitSuccess, setSubmitSuccess] = useState(false);

  const schema = createValidationSchema();

  // Validación en tiempo real
  const validateField = (field: keyof FormData, value: string) => {
    const result = schema.validateField(field, value);
    setErrors(prev => ({ ...prev, [field]: result.error || undefined }));
  };

  const handleInputChange = (field: keyof FormData, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }));
    
    // Validar solo si el campo ya fue tocado
    if (touchedFields[field]) {
      validateField(field, value);
    }
  };

  const handleBlur = (field: keyof FormData) => {
    setTouchedFields(prev => ({ ...prev, [field]: true }));
    validateField(field, formData[field]);
  };

  const handleSubmit = async () => {
    setIsSubmitting(true);
    setSubmitSuccess(false);

    // Validar todos los datos
    const validationResult = schema.validate(formData);
    
    if (!validationResult.success) {
      setErrors(validationResult.errors);
      setTouchedFields({ nombre: true, email: true, password: true });
      setIsSubmitting(false);
      return;
    }

    try {
      // Simular envío al servidor
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      console.log('Datos válidos enviados:', formData);
      setSubmitSuccess(true);
      setFormData({ nombre: '', email: '', password: '' });
      setErrors({});
      setTouchedFields({});
      
    } catch (error) {
      console.error('Error al enviar:', error);
    } finally {
      setIsSubmitting(false);
    }
  };

  const getFieldStatus = (field: keyof FormData) => {
    if (!touchedFields[field]) return 'default';
    if (errors[field]) return 'error';
    if (formData[field]) return 'success';
    return 'default';
  };

  const getInputClasses = (field: keyof FormData) => {
    const status = getFieldStatus(field);
    const baseClasses = "w-full pl-10 pr-4 py-3 border rounded-lg transition-all duration-200 focus:outline-none focus:ring-2";
    
    switch (status) {
      case 'error':
        return `${baseClasses} border-red-300 focus:border-red-500 focus:ring-red-200 bg-red-50`;
      case 'success':
        return `${baseClasses} border-green-300 focus:border-green-500 focus:ring-green-200 bg-green-50`;
      default:
        return `${baseClasses} border-gray-300 focus:border-blue-500 focus:ring-blue-200`;
    }
  };

  // Verificar requisitos de contraseña para indicadores visuales
  const passwordRequirements = {
    hasUppercase: /[A-Z]/.test(formData.password),
    hasLowercase: /[a-z]/.test(formData.password),
    hasNumber: /[0-9]/.test(formData.password),
    hasSpecial: /[^A-Za-z0-9]/.test(formData.password),
    hasMinLength: formData.password.length >= 8
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center p-4">
      <div className="w-full max-w-md">
        <div className="bg-white rounded-2xl shadow-xl p-8">
          <div className="text-center mb-8">
            <div className="w-16 h-16 bg-gradient-to-r from-blue-500 to-indigo-600 rounded-full flex items-center justify-center mx-auto mb-4">
              <User className="w-8 h-8 text-white" />
            </div>
            <h1 className="text-2xl font-bold text-gray-900">Crear Cuenta</h1>
            <p className="text-gray-600 mt-2">Completa tus datos para registrarte</p>
          </div>

          {submitSuccess && (
            <div className="mb-6 p-4 bg-green-50 border border-green-200 rounded-lg flex items-center">
              <CheckCircle className="w-5 h-5 text-green-600 mr-3" />
              <p className="text-green-800 font-medium">¡Registro exitoso! Tu cuenta ha sido creada.</p>
            </div>
          )}

          <div className="space-y-6">
            {/* Campo Nombre */}
            <div>
              <label htmlFor="nombre" className="block text-sm font-medium text-gray-700 mb-2">
                Nombre completo
              </label>
              <div className="relative">
                <User className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" />
                <input
                  id="nombre"
                  type="text"
                  value={formData.nombre}
                  onChange={(e) => handleInputChange('nombre', e.target.value)}
                  onBlur={() => handleBlur('nombre')}
                  className={getInputClasses('nombre')}
                  placeholder="Ingresa tu nombre completo"
                />
                {getFieldStatus('nombre') === 'success' && (
                  <CheckCircle className="absolute right-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-green-500" />
                )}
              </div>
              {errors.nombre && touchedFields.nombre && (
                <div className="mt-2 flex items-center text-red-600">
                  <AlertCircle className="w-4 h-4 mr-2" />
                  <p className="text-sm">{errors.nombre}</p>
                </div>
              )}
            </div>

            {/* Campo Email */}
            <div>
              <label htmlFor="email" className="block text-sm font-medium text-gray-700 mb-2">
                Correo electrónico
              </label>
              <div className="relative">
                <Mail className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" />
                <input
                  id="email"
                  type="email"
                  value={formData.email}
                  onChange={(e) => handleInputChange('email', e.target.value)}
                  onBlur={() => handleBlur('email')}
                  className={getInputClasses('email')}
                  placeholder="tu@email.com"
                />
                {getFieldStatus('email') === 'success' && (
                  <CheckCircle className="absolute right-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-green-500" />
                )}
              </div>
              {errors.email && touchedFields.email && (
                <div className="mt-2 flex items-center text-red-600">
                  <AlertCircle className="w-4 h-4 mr-2" />
                  <p className="text-sm">{errors.email}</p>
                </div>
              )}
            </div>

            {/* Campo Contraseña */}
            <div>
              <label htmlFor="password" className="block text-sm font-medium text-gray-700 mb-2">
                Contraseña
              </label>
              <div className="relative">
                <Lock className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" />
                <input
                  id="password"
                  type={showPassword ? 'text' : 'password'}
                  value={formData.password}
                  onChange={(e) => handleInputChange('password', e.target.value)}
                  onBlur={() => handleBlur('password')}
                  className={getInputClasses('password')}
                  placeholder="Crea una contraseña segura"
                />
                <button
                  type="button"
                  onClick={() => setShowPassword(!showPassword)}
                  className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600"
                >
                  {showPassword ? <EyeOff className="w-5 h-5" /> : <Eye className="w-5 h-5" />}
                </button>
              </div>
              {errors.password && touchedFields.password && (
                <div className="mt-2 flex items-center text-red-600">
                  <AlertCircle className="w-4 h-4 mr-2" />
                  <p className="text-sm">{errors.password}</p>
                </div>
              )}
              
              {/* Indicadores de requisitos de contraseña */}
              {(touchedFields.password || formData.password) && (
                <div className="mt-3 space-y-1">
                  <p className="text-xs text-gray-600 font-medium">Requisitos de contraseña:</p>
                  <div className="grid grid-cols-2 gap-1 text-xs">
                    <div className={`flex items-center ${passwordRequirements.hasUppercase ? 'text-green-600' : 'text-gray-400'}`}>
                      <div className={`w-2 h-2 rounded-full mr-2 ${passwordRequirements.hasUppercase ? 'bg-green-500' : 'bg-gray-300'}`} />
                      Mayúscula
                    </div>
                    <div className={`flex items-center ${passwordRequirements.hasLowercase ? 'text-green-600' : 'text-gray-400'}`}>
                      <div className={`w-2 h-2 rounded-full mr-2 ${passwordRequirements.hasLowercase ? 'bg-green-500' : 'bg-gray-300'}`} />
                      Minúscula
                    </div>
                    <div className={`flex items-center ${passwordRequirements.hasNumber ? 'text-green-600' : 'text-gray-400'}`}>
                      <div className={`w-2 h-2 rounded-full mr-2 ${passwordRequirements.hasNumber ? 'bg-green-500' : 'bg-gray-300'}`} />
                      Número
                    </div>
                    <div className={`flex items-center ${passwordRequirements.hasSpecial ? 'text-green-600' : 'text-gray-400'}`}>
                      <div className={`w-2 h-2 rounded-full mr-2 ${passwordRequirements.hasSpecial ? 'bg-green-500' : 'bg-gray-300'}`} />
                      Especial
                    </div>
                    <div className={`flex items-center col-span-2 ${passwordRequirements.hasMinLength ? 'text-green-600' : 'text-gray-400'}`}>
                      <div className={`w-2 h-2 rounded-full mr-2 ${passwordRequirements.hasMinLength ? 'bg-green-500' : 'bg-gray-300'}`} />
                      Mínimo 8 caracteres
                    </div>
                  </div>
                </div>
              )}
            </div>

            {/* Botón de envío */}
            <button
              type="button"
              onClick={handleSubmit}
              disabled={isSubmitting}
              className="w-full bg-gradient-to-r from-blue-500 to-indigo-600 text-white py-3 px-4 rounded-lg font-medium hover:from-blue-600 hover:to-indigo-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200"
            >
              {isSubmitting ? (
                <div className="flex items-center justify-center">
                  <div className="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin mr-2"></div>
                  Creando cuenta...
                </div>
              ) : (
                'Crear cuenta'
              )}
            </button>
          </div>

          <div className="mt-6 text-center">
            <p className="text-sm text-gray-600">
              ¿Ya tienes una cuenta?{' '}
              <button className="text-blue-600 hover:text-blue-700 font-medium">
                Iniciar sesión
              </button>
            </p>
          </div>
        </div>
      </div>
    </div>
  );
}
