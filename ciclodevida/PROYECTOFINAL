import React, { useState, useEffect, createContext, useContext } from 'react';
import { Heart, MessageCircle, Repeat2, Share, User, LogOut, Home, Search, Bell, Mail, Bookmark, UserCircle, Settings, Twitter, Eye, EyeOff } from 'lucide-react';

// Context para manejar la autenticación
const AuthContext = createContext();

// Hook personalizado para usar el contexto de autenticación
const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth debe usarse dentro de un AuthProvider');
  }
  return context;
};

// Componente proveedor de autenticación
const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [users, setUsers] = useState([
    {
      id: 1,
      username: 'usuario_demo',
      email: 'demo@twitter.com',
      password: 'password123',
      name: 'Usuario Demo',
      avatar: 'https://via.placeholder.com/40',
      bio: 'Usuario de demostración del sistema'
    }
  ]);
  const [loading, setLoading] = useState(true);

  // Verificar si hay un usuario logueado al cargar la aplicación
  useEffect(() => {
    // Simulamos verificación de usuario sin usar localStorage
    const demoUser = users.find(u => u.email === 'demo@twitter.com');
    // En un entorno real, aquí verificarías un token o sesión
    setLoading(false);
  }, []);

  // Función para registrar un nuevo usuario
  const register = (userData) => {
    const newUser = {
      id: users.length + 1,
      ...userData,
      avatar: 'https://via.placeholder.com/40',
      bio: 'Nuevo usuario de Twitter'
    };
    
    setUsers([...users, newUser]);
    setUser(newUser);
    return { success: true };
  };

  // Función para iniciar sesión
  const login = (email, password) => {
    const foundUser = users.find(u => u.email === email && u.password === password);
    if (foundUser) {
      setUser(foundUser);
      return { success: true };
    }
    return { success: false, error: 'Email o contraseña incorrectos' };
  };

  // Función para cerrar sesión
  const logout = () => {
    setUser(null);
  };

  // Verificar si el email ya existe
  const emailExists = (email) => {
    return users.some(u => u.email === email);
  };

  const value = {
    user,
    users,
    register,
    login,
    logout,
    emailExists,
    loading
  };

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
};

// Componente para proteger rutas
const ProtectedRoute = ({ children }) => {
  const { user, loading } = useAuth();

  if (loading) {
    return (
      <div className="flex justify-center items-center h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  if (!user) {
    return <AuthPage />;
  }

  return children;
};

// Componente de autenticación (Login/Register)
const AuthPage = () => {
  const [isLogin, setIsLogin] = useState(true);
  const [formData, setFormData] = useState({
    email: '',
    password: '',
    name: '',
    username: ''
  });
  const [errors, setErrors] = useState({});
  const [showPassword, setShowPassword] = useState(false);
  const { login, register, emailExists } = useAuth();

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
    // Limpiar errores al escribir
    if (errors[name]) {
      setErrors(prev => ({
        ...prev,
        [name]: ''
      }));
    }
  };

  const validateForm = () => {
    const newErrors = {};

    if (!formData.email) {
      newErrors.email = 'El email es requerido';
    } else if (!/\S+@\S+\.\S+/.test(formData.email)) {
      newErrors.email = 'Email inválido';
    }

    if (!formData.password) {
      newErrors.password = 'La contraseña es requerida';
    } else if (formData.password.length < 6) {
      newErrors.password = 'La contraseña debe tener al menos 6 caracteres';
    }

    if (!isLogin) {
      if (!formData.name) {
        newErrors.name = 'El nombre es requerido';
      }
      if (!formData.username) {
        newErrors.username = 'El nombre de usuario es requerido';
      }
      if (emailExists(formData.email)) {
        newErrors.email = 'Este email ya está registrado';
      }
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = () => {
    if (!validateForm()) return;

    if (isLogin) {
      const result = login(formData.email, formData.password);
      if (!result.success) {
        setErrors({ general: result.error });
      }
    } else {
      register(formData);
    }
  };

  const toggleMode = () => {
    setIsLogin(!isLogin);
    setFormData({
      email: '',
      password: '',
      name: '',
      username: ''
    });
    setErrors({});
  };

  return (
    <div className="min-h-screen bg-black flex items-center justify-center">
      <div className="max-w-md w-full mx-4">
        <div className="bg-black border border-gray-800 rounded-xl p-8">
          <div className="text-center mb-8">
            <Twitter className="h-8 w-8 text-blue-500 mx-auto mb-4" />
            <h1 className="text-2xl font-bold text-white">
              {isLogin ? 'Iniciar Sesión' : 'Crear Cuenta'}
            </h1>
          </div>

          <div className="space-y-4">
            {!isLogin && (
              <>
                <div>
                  <input
                    type="text"
                    name="name"
                    placeholder="Nombre completo"
                    value={formData.name}
                    onChange={handleInputChange}
                    className="w-full px-4 py-3 bg-gray-900 border border-gray-700 rounded-lg text-white placeholder-gray-500 focus:outline-none focus:border-blue-500"
