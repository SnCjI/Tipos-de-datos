import React, { useState } from 'react';

// Componente para el campo de entrada del número
const InputNumber = ({ onGuess, gameWon, currentGuess, setCurrentGuess }) => {
  const handleSubmit = (e) => {
    e.preventDefault();
    if (currentGuess && !isNaN(currentGuess) && currentGuess >= 1 && currentGuess <= 100) {
      onGuess(parseInt(currentGuess));
    }
  };

  const handleKeyPress = (e) => {
    if (e.key === 'Enter') {
      handleSubmit(e);
    }
  };

  return (
    <div className="mb-6">
      <div className="flex flex-col items-center gap-4">
        <input
          type="number"
          min="1"
          max="100"
          value={currentGuess}
          onChange={(e) => setCurrentGuess(e.target.value)}
          onKeyPress={handleKeyPress}
          placeholder="Ingresa un número del 1 al 100"
          disabled={gameWon}
          className="px-4 py-2 text-lg border-2 border-blue-300 rounded-lg focus:outline-none focus:border-blue-500 disabled:bg-gray-200 disabled:cursor-not-allowed w-80"
        />
        <button
          onClick={handleSubmit}
          disabled={gameWon || !currentGuess}
          className="px-6 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors"
        >
          {gameWon ? '¡Ganaste!' : 'Adivinar'}
        </button>
      </div>
    </div>
  );
};

// Componente para mostrar mensajes y pistas
const Message = ({ message, messageType, attempts }) => {
  const getMessageStyle = () => {
    switch (messageType) {
      case 'success':
        return 'bg-green-100 border-green-400 text-green-700';
      case 'hint':
        return 'bg-yellow-100 border-yellow-400 text-yellow-700';
      case 'error':
        return 'bg-red-100 border-red-400 text-red-700';
      default:
        return 'bg-blue-100 border-blue-400 text-blue-700';
    }
  };

  const getIcon = () => {
    switch (messageType) {
      case 'success':
        return '🎉';
      case 'hint':
        return '🤔';
      case 'error':
        return '❌';
      default:
        return '🎮';
    }
  };

  return (
    <div className={`border-l-4 p-4 mb-4 rounded-r-lg ${getMessageStyle()}`}>
      <div className="flex items-center">
        <span className="text-2xl mr-3">{getIcon()}</span>
        <div>
          <p className="font-semibold text-lg">{message}</p>
          {attempts > 0 && (
            <p className="text-sm mt-1">
              Intento {attempts} {attempts === 1 ? '' : 's'}
            </p>
          )}
        </div>
      </div>
    </div>
  );
};

// Componente para reiniciar el juego
const RestartButton = ({ onRestart, gameWon }) => {
  return (
    <button
      onClick={onRestart}
      className={`px-6 py-3 rounded-lg font-semibold transition-colors ${
        gameWon
          ? 'bg-green-500 hover:bg-green-600 text-white'
          : 'bg-gray-500 hover:bg-gray-600 text-white'
      }`}
    >
      {gameWon ? 'Jugar de Nuevo' : 'Reiniciar Juego'}
    </button>
  );
};

// Componente para mostrar estadísticas del juego
const GameStats = ({ attempts, bestScore, gamesPlayed }) => {
  return (
    <div className="bg-gray-100 p-4 rounded-lg mb-6">
      <h3 className="font-semibold text-lg mb-2 text-gray-800">📊 Estadísticas</h3>
      <div className="grid grid-cols-3 gap-4 text-center">
        <div>
          <p className="text-2xl font-bold text-blue-600">{attempts}</p>
          <p className="text-sm text-gray-600">Intentos actuales</p>
        </div>
        <div>
          <p className="text-2xl font-bold text-green-600">{bestScore || '-'}</p>
          <p className="text-sm text-gray-600">Mejor puntuación</p>
        </div>
        <div>
          <p className="text-2xl font-bold text-purple-600">{gamesPlayed}</p>
          <p className="text-sm text-gray-600">Juegos jugados</p>
        </div>
      </div>
    </div>
  );
};

// Componente principal del juego
const Game = () => {
  const [targetNumber, setTargetNumber] = useState(() => Math.floor(Math.random() * 100) + 1);
  const [currentGuess, setCurrentGuess] = useState('');
  const [message, setMessage] = useState('¡Bienvenido! Adivina el número entre 1 y 100');
  const [messageType, setMessageType] = useState('default');
  const [attempts, setAttempts] = useState(0);
  const [gameWon, setGameWon] = useState(false);
  const [bestScore, setBestScore] = useState(null);
  const [gamesPlayed, setGamesPlayed] = useState(0);

  const handleGuess = (guess) => {
    const newAttempts = attempts + 1;
    setAttempts(newAttempts);
    setCurrentGuess('');

    if (guess === targetNumber) {
      setMessage(`¡Felicidades! Adivinaste el número ${targetNumber} en ${newAttempts} ${newAttempts === 1 ? 'intento' : 'intentos'}!`);
      setMessageType('success');
      setGameWon(true);
      setGamesPlayed(gamesPlayed + 1);
      
      // Actualizar mejor puntuación
      if (!bestScore || newAttempts < bestScore) {
        setBestScore(newAttempts);
      }
    } else if (guess < targetNumber) {
      setMessage(`El número es MAYOR que ${guess}. ¡Sigue intentando!`);
      setMessageType('hint');
    } else {
      setMessage(`El número es MENOR que ${guess}. ¡Sigue intentando!`);
      setMessageType('hint');
    }
  };

  const handleRestart = () => {
    setTargetNumber(Math.floor(Math.random() * 100) + 1);
    setCurrentGuess('');
    setMessage('¡Nuevo juego! Adivina el número entre 1 y 100');
    setMessageType('default');
    setAttempts(0);
    setGameWon(false);
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-purple-50 flex items-center justify-center p-4">
      <div className="bg-white rounded-2xl shadow-2xl p-8 max-w-md w-full">
        <div className="text-center mb-8">
          <h1 className="text-3xl font-bold text-gray-800 mb-2">🎯 Adivina el Número</h1>
          <p className="text-gray-600">Encuentra el número secreto entre 1 y 100</p>
        </div>

        {/* Conditional Rendering para mostrar estadísticas */}
        {(attempts > 0 || gamesPlayed > 0) && (
          <GameStats 
            attempts={attempts} 
            bestScore={bestScore} 
            gamesPlayed={gamesPlayed} 
          />
        )}

        {/* Componente Message con renderizado condicional */}
        <Message 
          message={message} 
          messageType={messageType} 
          attempts={attempts}
        />

        {/* Componente InputNumber */}
        <InputNumber 
          onGuess={handleGuess}
          gameWon={gameWon}
          currentGuess={currentGuess}
          setCurrentGuess={setCurrentGuess}
        />

        {/* Conditional Rendering para mostrar pistas adicionales */}
        {attempts > 0 && !gameWon && (
          <div className="mb-6 p-3 bg-blue-50 rounded-lg">
            <h4 className="font-semibold text-blue-800 mb-2">💡 Pistas:</h4>
            <ul className="text-sm text-blue-700 space-y-1">
              {attempts >= 5 && <li>• El número está entre {Math.max(1, targetNumber - 25)} y {Math.min(100, targetNumber + 25)}</li>}
              {attempts >= 10 && <li>• {targetNumber % 2 === 0 ? 'El número es par' : 'El número es impar'}</li>}
              {attempts >= 15 && <li>• El número está entre {Math.max(1, targetNumber - 10)} y {Math.min(100, targetNumber + 10)}</li>}
            </ul>
          </div>
        )}

        {/* Componente RestartButton */}
        <div className="text-center">
          <RestartButton onRestart={handleRestart} gameWon={gameWon} />
        </div>

        {/* Conditional Rendering para mostrar motivación */}
        {gameWon && (
          <div className="mt-6 p-4 bg-green-50 rounded-lg text-center">
            <p className="text-green-800 font-semibold">
              {attempts <= 5 ? '¡Excelente! Eres muy bueno en esto 🌟' :
               attempts <= 10 ? '¡Bien hecho! Gran trabajo 👏' :
               '¡Lo lograste! La persistencia es clave 💪'}
            </p>
          </div>
        )}
      </div>
    </div>
  );
};

export default Game;
